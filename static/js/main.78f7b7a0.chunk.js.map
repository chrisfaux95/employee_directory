{"version":3,"sources":["components/Header.js","components/Footer.js","components/Wrapper/index.js","components/EmployeeRow.js","utils/sort.js","components/Table.js","utils/API.js","pages/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","Wrapper","props","children","EmployeeRow","src","employee","picture","medium","alt","name","first","last","email","phone","checkSort","a","b","nameA","toUpperCase","nameB","sortNames","arr","sort","sortEmails","Table","useState","Users","results","employees","setEmployees","employeesFiltered","setEmployeesFiltered","type","id","onChange","event","filterStr","target","value","filter","item","str","indexOf","filterNames","filterEmails","scope","onClick","buffer","buffer2","map","Search","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.78f7b7a0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n    return (\n        <header className=\"\">\n            <h3>Employees:</h3>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\n\nexport default function Footer() {\n    return (\n        <footer className=\"text-center w-100 bg-dark py-2 text-light\">\n            &copy;2020 - Chris Faux\n        </footer>\n    )\n}","import React from 'react';\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <main className=\"wrapper\">{props.children}</main>;\n}\n\nexport default Wrapper;","import React from 'react';\n\nexport default function EmployeeRow(props) {\n    return (\n        <tr>\n            <td><img src={props.employee.picture.medium} \n                alt={props.employee.name.first + ' ' + props.employee.name.last}\n            /></td>\n            <td>{props.employee.name.first} {props.employee.name.last}</td>\n            <td>{props.employee.email}</td>\n            <td>{props.employee.phone}</td>\n            \n        </tr>\n    )\n}","function checkSort(a,b) {\n    let nameA = a.toUpperCase();\n    let nameB = b.toUpperCase();\n    if (nameA < nameB) return -1;\n    if (nameA > nameB) return 1;\n    return 0;\n}\n\nexport function sortNames(arr) {\n    return arr.sort((a, b) => checkSort(a.name.last, b.name.last));\n}\n\nexport function sortNumbers(arr) {\n    return arr.sort();\n}\n\nexport function sortEmails(arr) {\n    return arr.sort((a,b) => checkSort(a.email, b.email))\n}\n\nexport function filterEmails(item, str) {\n    return item.email.indexOf(str) >= 0;\n}\n\nexport function filterNames(item, str) {\n    let fullname = `${item.name.first} ${item.name.last}`\n    return fullname.indexOf(str) >= 0;\n}","import React, { useState } from 'react';\nimport EmployeeRow from './EmployeeRow';\nimport getUsers from '../utils/API'\nimport { sortNames, sortEmails, filterNames, filterEmails } from '../utils/sort';\n\n\nexport default function Table() {\n    const [employees, setEmployees] = useState(getUsers());\n    const [employeesFiltered, setEmployeesFiltered] = useState(employees);\n\n    const handleInputChange = (event) => {\n        const filterStr = event.target.value;\n        setEmployeesFiltered(employees.filter((item) => filterNames(item, filterStr) || filterEmails(item, filterStr)))\n    }\n\n    const handleNameSort = () => {\n        let buffer = [...employeesFiltered];\n        sortNames(buffer);\n        setEmployeesFiltered(buffer);\n        let buffer2 = [...employees];\n        sortNames(buffer2);\n        setEmployees(buffer2)\n    }\n\n    const handleEmailSort = () => {\n        let buffer = [...employeesFiltered];\n        sortEmails(buffer);\n        setEmployeesFiltered(buffer);\n        let buffer2 = [...employees];\n        sortEmails(buffer2);\n        setEmployees(buffer2)\n    }\n\n    return (\n        <div className='container-md mx-auto my-1 justify-content-center'>\n            <input type=\"text\" id=\"employee\" onChange={handleInputChange}></input>\n            <table className=\"table table-striped\">\n                <thead className=\"thead-dark\">\n                    <tr>\n                        <th scope=\"col\"></th>\n                        <th scope=\"col\">Name&nbsp;\n                        <i onClick={handleNameSort}\n                        className=\"fas fa-sort\"> \n                                </i>\n                        </th>\n                        <th scope=\"col\">Email&nbsp;\n                        <i onClick={handleEmailSort}\n                                className=\"fas fa-sort\"></i>\n                        </th>\n                        <th scope=\"col\">Phone Number</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {employeesFiltered.map(item => <EmployeeRow employee={item} />)}\n                </tbody>\n            </table>\n        </div>\n    )\n}","// import fs from 'fs';\nimport Users from './users.json';\n\nexport default function getUsers() {\n    let result = Users;\n    return result.results;\n}\n\n","import React from 'react';\nimport Table from '../components/Table';\n\nexport default function Search() {\n    return (\n        <main>\n            <Table />\n        </main>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport Wrapper from './components/Wrapper'\nimport Search from './pages/Search';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Wrapper>\n        <Search></Search>\n      </Wrapper>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}